package org.opentestsystem.delivery.logging;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

/**
 * Logs events to logstash for tracking application events.
 */
public class ProctorEventLogger extends EventLogger {
  private static final String APP = "proctor";

  public enum ProctorLogEvent implements ILogEvent {
    ADD_ASSESSMENTS,
    EXAM_STATUS,
    PAUSE_EXAM,
    PING,
    PRINT,
    SEGMENT_TRANSITION,
    START_EXAM,
    START_SESSION,
  }

  public enum ProctorEventData implements IEventData {
    ACCOMMODATIONS,
    ASSESSMENTS,
    EXAM,
    EXAMS,
    PROCTOR_ID,
    REASON,
    REQUEST_KEY,
    SEGMENT,
    SEGMENT_TRANSITION_REQUESTS,
  }

  public enum SubEvent {
    READ,
    APPROVE,
    DENY
  }

  // event type discriminators
  // The event type is unknown in the ActiveSessionXHR.autoRefreshData method
  // until the operation is performed.
  // The exam status is checked to determine the type of event occurring
  public static final String PENDING_STATUS = "pending";
  public static final String SEGMENT_ENTRY_STATUS = "segmentEntry";
  public static final String SEGMENT_EXIT_STATUS = "segmentExit";

  /**
   * Add assessment to a session
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param assessments assessments that are added and now available to start in the session session
   */
  public static void eventAddAssessments(final String proctorId, final UUID sessionId, final String[] assessments) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId);
    fields.put(ProctorEventData.ASSESSMENTS, assessments);
    info(APP, ProctorLogEvent.ADD_ASSESSMENTS, null, sessionId.toString(), null, fields);
  }

  /**
   * Requests for student approval received
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param exams list of exams pending start approval
   */
  public static void eventReadExamsPendingApproval(final String proctorId, final UUID sessionId, final List<UUID> exams) {
    if (!exams.isEmpty()) {
      final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);
      fields.put(ProctorEventData.EXAMS, exams);
      info(APP, ProctorLogEvent.START_EXAM, null, sessionId.toString(), null, fields);
    }
  }

  /**
   * Student approved to start an exam
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param examId approved exam
   * @param accommodations accommodations given during the approval
   */
  public static void eventApproveExam(final String proctorId, final UUID sessionId, final UUID examId, final
  Map<Integer, Set<String>> accommodations) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.APPROVE);
    fields.put(ProctorEventData.EXAM, examId);
    fields.put(ProctorEventData.ACCOMMODATIONS, accommodations);
    info(APP, ProctorLogEvent.EXAM_STATUS, null, sessionId.toString(), null, fields);
  }

  /**
   * Student print/emboss request received
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param exams list of exams requesting printing from proctor
   */
  public static void eventReadPrint(final String proctorId, final UUID sessionId, final List<UUID> exams) {
    if (!exams.isEmpty()) {
      final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);
      fields.put(ProctorEventData.EXAMS, exams);
      info(APP, ProctorLogEvent.PRINT, null, sessionId.toString(), null, fields);
    }
  }

  /**
   * Student print request was approved and performed
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param exam exam that requested printing
   */
  public static void eventApprovePrint(final String proctorId, final UUID sessionId, final UUID exam) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.APPROVE);
    fields.put(ProctorEventData.EXAM, exam);
    info(APP, ProctorLogEvent.PRINT, null, sessionId.toString(), null, fields);
  }

  /**
   * Student print request was denied
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param requestKey
   * @param reason explanation for denial supplied by the proctor
   */
  public static void eventDenyPrint(final String proctorId, final UUID sessionId, final UUID requestKey, final String
    reason) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.DENY);
    fields.put(ProctorEventData.REQUEST_KEY, requestKey);
    fields.put(ProctorEventData.REASON, reason);
    info(APP, ProctorLogEvent.PRINT, null, sessionId.toString(), null, fields);
  }

  /**
   * Student segment transition request received
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param segmentTransitionRequests list of segments and their exams requesting transitions
   */
  public static void eventReadSegmentTransition(final String proctorId, final UUID sessionId, final
  List<SegmentTransitionRequest> segmentTransitionRequests) {
    if (!segmentTransitionRequests.isEmpty()) {
      final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);

      final List<Map<IEventData, String>> requests = new ArrayList<>(segmentTransitionRequests.size());
      for (SegmentTransitionRequest segmentTransitionRequest : segmentTransitionRequests) {
        final Map<IEventData, String> requestFields = new HashMap<>(2);
        requestFields.put(ProctorEventData.EXAM, segmentTransitionRequest.examId().toString());
        requestFields.put(ProctorEventData.SEGMENT, String.valueOf(segmentTransitionRequest.segment()));
        requests.add(requestFields);
      }
      fields.put(ProctorEventData.SEGMENT_TRANSITION_REQUESTS, requests);

      info(APP, ProctorLogEvent.SEGMENT_TRANSITION, null, sessionId.toString(), null, fields);
    }
  }

  /**
   * Student status update request denied
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param examId
   * @param reason explanation for denial supplied by the proctor
   */
  public static void eventExamStatusDeny(final String proctorId, final UUID sessionId, final UUID examId, final
  String reason) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId, SubEvent.DENY);
    fields.put(ProctorEventData.EXAM, examId);
    fields.put(ProctorEventData.REASON, reason);
    info(APP, ProctorLogEvent.EXAM_STATUS, null, sessionId.toString(), null, fields);
  }

  /**
   * Exam paused by proctor
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   * @param examId paused exam
   */
  public static void eventPauseExam(final String proctorId, final UUID sessionId, final UUID examId) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId);
    fields.put(ProctorEventData.EXAM, examId);
    info(APP, ProctorLogEvent.PAUSE_EXAM, null, sessionId.toString(), null, fields);
  }

  /**
   * Browser sent a ping to the server
   *
   * @param proctorId logged in proctor
   * @param sessionId session created by proctor
   */
  public static void eventPing(final String proctorId, final UUID sessionId) {
    final Map<IEventData, Object> fields = fields(proctorId, sessionId);
    info(APP, ProctorLogEvent.PING, null, sessionId.toString(), null, fields);
  }

  // event entry functions
  public static void eventEntry(final ILogEvent event) {
    info(APP, event, Checkpoint.ENTER.name(), null, null, null);
  }

  public static void eventEntry(final ILogEvent event, final String proctorId) {
    info(APP, event, Checkpoint.ENTER.name(), null, null, fields(proctorId));
  }

  public static void eventEntry(final ILogEvent event, final String proctorId, final UUID sessionId) {
    info(APP, event, Checkpoint.ENTER.name(), sessionId.toString(), null, fields(proctorId, sessionId));
  }

  public static void eventEntry(final ILogEvent event, final SubEvent subEvent, final String proctorId, final UUID
    sessionId) {
    info(APP, event, Checkpoint.ENTER.name(), sessionId.toString(), null, fields(proctorId, sessionId, subEvent));
  }

  // event log functions
  public static void info(final ILogEvent event, final String proctorId) {
    info(APP, event, null, null, null, fields(proctorId));
  }

  public static void info(final ILogEvent event, final String proctorId, final UUID sessionId) {
    info(APP, event, null, sessionId.toString(), null, fields(proctorId, sessionId));
  }

  public static void info(final ILogEvent event, final SubEvent subEvent, final String proctorId, final UUID
    sessionId) {
    info(APP, event, null, sessionId.toString(), null, fields(proctorId, sessionId, subEvent));
  }

  // event error functions
  public static void error(final ILogEvent event, final Exception e) {
    error(APP, event, null, null, null, null, e);
  }

  public static void error(final ILogEvent event, final String proctorId, final Exception e) {
    error(APP, event, null, null, null, fields(proctorId), e);
  }

  public static void error(final ILogEvent event, final String proctorId, final UUID sessionId, final Exception e) {
    error(APP, event, null, sessionId.toString(), null, fields(proctorId, sessionId), e);
  }

  public static void error(final ILogEvent event, final SubEvent subEvent, final String proctorId, final UUID
    sessionId, final Exception e) {
    error(APP, event, null, sessionId.toString(), null, fields(proctorId, sessionId, subEvent), e);
  }

  // converts parameters to a map
  private static Map<IEventData, Object> fields(final String proctorId) {
    final Map<IEventData, Object> map = new HashMap<>();
    map.put(ProctorEventData.PROCTOR_ID, proctorId);
    return map;
  }

  private static Map<IEventData, Object> fields(final String proctorId, final UUID sessionId) {
    final Map<IEventData, Object> map = fields(proctorId);
    map.put(EventData.SESSION_ID, sessionId.toString());
    return map;
  }

  private static Map<IEventData, Object> fields(final String proctorId, final UUID sessionId, final SubEvent
    subEventData) {
    final Map<IEventData, Object> map = fields(proctorId, sessionId);
    map.put(EventData.SUB_EVENT, subEventData.name());
    return map;
  }

}
