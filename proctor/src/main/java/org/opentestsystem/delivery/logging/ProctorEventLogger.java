package org.opentestsystem.delivery.logging;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static java.lang.String.format;
import static java.util.Collections.unmodifiableMap;
import static org.opentestsystem.delivery.logging.EventLogger.log;
import static org.opentestsystem.delivery.logging.EventLogger.error;

public class ProctorEventLogger {
    private static final String APP = "proctor";
    private static final String PROCTOR_ID = "proctor_id";
    private static final String SESSION_ID = "session_id";
    private static final String ASSESSMENTS = "assessments";
    private static final String EXAMS = "exams";

    private static final String EVENT_ENTRY_SUFFIX = "entry";

    public static final String LOGIN = "login";
    public static final String LOGOUT = "logout";
    public static final String START_SESSION = "start_session";
    public static final String START_EXAM = "start_exam";

    public static final String SUB_EVENT = "sub_event";

    public static final String MANUAL = "manual";
    public static final String AUTO = "auto";
    public static final String READ_EXAMS_PENDING_APPROVAL = "read_exams_pending_approval";

    public static final String ADD_ASSESSMENTS = "add_assessments";

    public static void eventEntry(final String event, final String proctorId) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);

        log(APP, format("%s_%s", event, EVENT_ENTRY_SUFFIX), unmodifiableMap(fields));
    }

    public static void eventEntry(final String event, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());

        log(APP, format("%s_%s", event, EVENT_ENTRY_SUFFIX), unmodifiableMap(fields));
    }

    public static void eventEntry(final String event, final String subevent, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());

        log(APP, event, format("%s_%s", subevent, EVENT_ENTRY_SUFFIX), unmodifiableMap(fields));
    }

    public static void eventLog(final String event, final String proctorId) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);

        log(APP, event, unmodifiableMap(fields));
    }

    public static void eventLog(final String event, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());

        log(APP, event, unmodifiableMap(fields));
    }

    public static void eventError(final String event, final String proctorId, final Exception e) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);

        error(APP, event, unmodifiableMap(fields), e);
    }

    public static void eventError(final String event, final String proctorId, final UUID sessionId, final Exception e) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());

        error(APP, event, unmodifiableMap(fields), e);
    }

    public static void eventReadExamsPendingApproval(final String subEvent, final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());
        fields.put(SUB_EVENT, subEvent);
        fields.put(EXAMS, exams);

        log(APP, READ_EXAMS_PENDING_APPROVAL, unmodifiableMap(fields));
    }

    public static void eventAddAssessments(final String proctorId, final UUID sessionId, final String[] assessments) {
        Map<String, Object> fields = new HashMap<>();
        fields.put(PROCTOR_ID, proctorId);
        fields.put(SESSION_ID, sessionId.toString());
        fields.put(ASSESSMENTS, assessments);

        log(APP, ADD_ASSESSMENTS, unmodifiableMap(fields));
    }
}
