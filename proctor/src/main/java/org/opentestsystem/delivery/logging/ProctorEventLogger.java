package org.opentestsystem.delivery.logging;


import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import static java.lang.String.format;
import static org.opentestsystem.delivery.logging.EventLogger.log;
import static org.opentestsystem.delivery.logging.EventLogger.error;

public class ProctorEventLogger {
    private static final String APP = "proctor";
    private static final String PROCTOR_ID = "proctor_id";
    private static final String SESSION_ID = "session_id";
    private static final String ASSESSMENTS = "assessments";
    private static final String EXAM = "exam_id";
    private static final String EXAMS = "exams";
    private static final String ACCOMMODATIONS = "accommodations";
    private static final String REQUEST_ID = "request_id";
    private static final String REASON = "reason";
    private static final String SUB_EVENT = "sub_event";

    private static final String EVENT_ENTRY_SUFFIX = "entry";

    public static final String LOGIN = "login";
    public static final String LOGOUT = "logout";
    public static final String START_SESSION = "start_session";
    public static final String ADD_ASSESSMENTS = "add_assessments";
    public static final String START_EXAM = "start_exam";
    public static final String PRINT = "print";
    public static final String PAUSE_EXAM = "pause_exam";

    public static final String READ = "read";
    public static final String APPROVE = "approve";
    public static final String DENY = "deny";

    public static void eventEntry(final String event) {
        eventEntry(event, new HashMap<String, Object>());
    }

    public static void eventEntry(final String event, final String proctorId) {
        Map<String, Object> fields = fields(proctorId);

        eventEntry(event, fields);
    }

    public static void eventEntry(final String event, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = fields(proctorId, sessionId);

        eventEntry(event, fields);
    }

    public static void eventEntry(final String event, final String subEvent, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = fields(proctorId, sessionId, subEvent);

        eventEntry(event, fields);
    }

    private static void eventEntry(final String event, Map<String, Object> fields) {
        log(APP, format("%s_%s", event, EVENT_ENTRY_SUFFIX), fields);
    }

    public static void eventLog(final String event, final String proctorId) {
        Map<String, Object> fields = fields(proctorId);

        log(APP, event, fields);
    }

    public static void eventLog(final String event, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = fields(proctorId, sessionId);

        log(APP, event, fields);
    }

    public static void eventLog(final String event, final String subEvent, final String proctorId, final UUID sessionId) {
        Map<String, Object> fields = fields(proctorId, sessionId, subEvent);

        log(APP, event, fields);
    }

    public static void eventError(final String event, final Exception e) {
        error(APP, event, new HashMap<String, Object>(), e);
    }

    public static void eventError(final String event, final String proctorId, final Exception e) {
        Map<String, Object> fields = fields(proctorId);

        error(APP, event, fields, e);
    }

    public static void eventError(final String event, final String proctorId, final UUID sessionId, final Exception e) {
        Map<String, Object> fields = fields(proctorId, sessionId);

        error(APP, event, fields, e);
    }

    public static void eventError(final String event, final String subEvent, final String proctorId, final UUID sessionId, final Exception e) {
        Map<String, Object> fields = fields(proctorId, sessionId, subEvent);

        error(APP, event, fields, e);
    }

    public static void eventAddAssessments(final String proctorId, final UUID sessionId, final String[] assessments) {
        Map<String, Object> fields = fields(proctorId, sessionId);

        fields.put(ASSESSMENTS, assessments);

        log(APP, ADD_ASSESSMENTS, fields);
    }

    public static void eventReadExamsPendingApproval(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = fields(proctorId, sessionId, READ);

        fields.put(EXAMS, exams);

        log(APP, START_EXAM, fields);
    }

    public static void eventApproveExam(final String proctorId, final UUID sessionId, final UUID examId, final Map<Integer, Set<String>> accommodations) {
        Map<String, Object> fields = fields(proctorId, sessionId, APPROVE);

        fields.put(EXAM, examId);
        fields.put(ACCOMMODATIONS, accommodations);

        log(APP, START_EXAM, fields);
    }

    public static void eventDenyExam(final String proctorId, final UUID sessionId, final UUID examId, final String reason) {
        Map<String, Object> fields = fields(proctorId, sessionId, DENY);

        fields.put(EXAM, examId);
        fields.put(REASON, reason);

        log(APP, START_EXAM, fields);
    }

    public static void eventReadPrintRequests(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = fields(proctorId, sessionId, READ);

        fields.put(EXAMS, exams);

        log(APP, PRINT, fields);
    }

    public static void eventApprovePrintRequests(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = fields(proctorId, sessionId, APPROVE);

        fields.put(EXAMS, exams);

        log(APP, PRINT, fields);
    }

    public static void eventDenyPrintRequest(final String proctorId, final UUID sessionId, final UUID requestId, final String reason) {
        Map<String, Object> fields = fields(proctorId, sessionId, DENY);

        fields.put(REQUEST_ID, requestId);
        fields.put(REASON, reason);

        log(APP, PRINT, fields);
    }

    public static void eventReadSegmentTransitionRequests(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = fields(proctorId, sessionId, READ);

        fields.put(EXAMS, exams);

        log(APP, PRINT, fields);
    }

    public static void eventApproveSegmentTransitionRequests(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        Map<String, Object> fields = fields(proctorId, sessionId, APPROVE);

        fields.put(EXAMS, exams);

        log(APP, PRINT, fields);
    }

    public static void eventDenySegmentTransitionRequest(final String proctorId, final UUID sessionId, final UUID requestId, final String reason) {
        Map<String, Object> fields = fields(proctorId, sessionId, DENY);

        fields.put(REQUEST_ID, requestId);
        fields.put(REASON, reason);

        log(APP, PRINT, fields);
    }

    public static void eventPauseExam(final String proctorId, final UUID sessionId, final UUID examId) {
        Map<String, Object> fields = fields(proctorId, sessionId);

        fields.put(EXAM, examId);

        log(APP, PRINT, fields);
    }


    private static Map<String, Object> fields(final String proctorId) {
        Map<String, Object> map = new HashMap<>();
        map.put(PROCTOR_ID, proctorId);
        return map;
    }

    private static Map<String, Object> fields(final String proctorId, final UUID sessionId) {
        Map<String, Object> map = fields(proctorId);
        map.put(SESSION_ID, sessionId.toString());
        return map;
    }

    private static Map<String, Object> fields(final String proctorId, final UUID sessionId, final String subEvent) {
        Map<String, Object> map = fields(proctorId, sessionId);
        map.put(SUB_EVENT, subEvent);
        return map;
    }
}
