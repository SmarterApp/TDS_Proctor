package org.opentestsystem.delivery.logging;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import static java.lang.String.format;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.EventData.PROCTOR_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.EventData.SESSION_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.EventData.SUB_EVENT;

/**
 * Logs events to logstash for tracking application events.
 */
public class ProctorEventLogger {
    private static final String APP = "proctor";
    private static final String EVENT_ENTRY_SUFFIX = "entry";

    public enum LogEvent {
        LOGIN,
        LOGOUT,
        START_SESSION,
        ADD_ASSESSMENTS,
        EXAM_STATUS,
        START_EXAM,
        PRINT,
        SEGMENT_TRANSITION,
        PAUSE_EXAM,
        PING
    }

    public enum EventData {
        SUB_EVENT,
        PROCTOR_ID,
        SESSION_ID,
        ASSESSMENTS,
        EXAM,
        EXAMS,
        ACCOMMODATIONS,
        SEGMENT_TRANSITION_REQUESTS,
        SEGMENT,
        REQUEST_KEY,
        REASON
    }

    public enum SubEvent {
        READ,
        APPROVE,
        DENY
    }

    public static final String PENDING_STATUS = "pending";
    public static final String SEGMENT_ENTRY_STATUS = "segmentEntry";
    public static final String SEGMENT_EXIT_STATUS = "segmentExit";

    public static void eventAddAssessments(final String proctorId, final UUID sessionId, final String[] assessments) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId);
        fields.put(EventData.ASSESSMENTS, assessments);
        log(LogEvent.ADD_ASSESSMENTS, fields);
    }

    public static void eventReadExamsPendingApproval(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        if (!exams.isEmpty()) {
            final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);
            fields.put(EventData.EXAMS, exams);
            log(LogEvent.START_EXAM, fields);
        }
    }

    public static void eventApproveExam(final String proctorId, final UUID sessionId, final UUID examId, final Map<Integer, Set<String>> accommodations) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.APPROVE);
        fields.put(EventData.EXAM, examId);
        fields.put(EventData.ACCOMMODATIONS, accommodations);
        log(LogEvent.EXAM_STATUS, fields);
    }

    public static void eventReadPrint(final String proctorId, final UUID sessionId, final List<UUID> exams) {
        if (!exams.isEmpty()) {
            final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);
            fields.put(EventData.EXAMS, exams);
            log(LogEvent.PRINT, fields);
        }
    }

    public static void eventApprovePrint(final String proctorId, final UUID sessionId, final UUID exam) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.APPROVE);
        fields.put(EventData.EXAM, exam);
        log(LogEvent.PRINT, fields);
    }

    public static void eventDenyPrint(final String proctorId, final UUID sessionId, final UUID requestKey, final String reason) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.DENY);
        fields.put(EventData.REQUEST_KEY, requestKey);
        fields.put(EventData.REASON, reason);
        log(LogEvent.PRINT, fields);
    }

    public static void eventReadSegmentTransition(final String proctorId, final UUID sessionId, final List<SegmentTransitionRequest> segmentTransitionRequests) {
        if (!segmentTransitionRequests.isEmpty()) {
            final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.READ);

            final List<Map<EventData, String>> requests = new ArrayList<>(segmentTransitionRequests.size());
            for(SegmentTransitionRequest segmentTransitionRequest: segmentTransitionRequests) {
                final Map<EventData, String> requestFields = new HashMap<>(2);
                requestFields.put(EventData.EXAM, segmentTransitionRequest.examId().toString());
                requestFields.put(EventData.SEGMENT, String.valueOf(segmentTransitionRequest.segment()));
                requests.add(requestFields);
            }
            fields.put(EventData.SEGMENT_TRANSITION_REQUESTS, requests);

            log(LogEvent.SEGMENT_TRANSITION, fields);
        }
    }

    public static void eventExamStatusDeny(final String proctorId, final UUID sessionId, final UUID examId, final String reason) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId, SubEvent.DENY);
        fields.put(EventData.EXAM, examId);
        fields.put(EventData.REASON, reason);
        log(LogEvent.EXAM_STATUS, fields);
    }

    public static void eventPauseExam(final String proctorId, final UUID sessionId, final UUID examId) {
        final Map<EventData, Object> fields = fields(proctorId, sessionId);
        fields.put(EventData.EXAM, examId);
        log(LogEvent.PAUSE_EXAM, fields);
    }

    public static void eventPing(final String proctorId, final UUID sessionId) {
        log(LogEvent.PING, fields(proctorId, sessionId));
    }

    // event entry functions
    public static void eventEntry(final LogEvent event) {
        eventEntry(event, new HashMap<EventData, Object>());
    }

    public static void eventEntry(final LogEvent event, final String proctorId) {
        eventEntry(event, fields(proctorId));
    }

    public static void eventEntry(final LogEvent event, final String proctorId, final UUID sessionId) {
        eventEntry(event, fields(proctorId, sessionId));
    }

    public static void eventEntry(final LogEvent event, final SubEvent subEvent, final String proctorId, final UUID sessionId) {
        eventEntry(event, fields(proctorId, sessionId, subEvent));
    }

    private static void eventEntry(final LogEvent event, Map<EventData, Object> fields) {
        EventLogger.log(APP, format("%s_%s", toString(event), EVENT_ENTRY_SUFFIX), toStringKeys(fields));
    }

    // event log functions
    public static void info(final LogEvent event, final String proctorId) {
        log(event, fields(proctorId));
    }

    public static void info(final LogEvent event, final String proctorId, final UUID sessionId) {
        log(event, fields(proctorId, sessionId));
    }

    public static void info(final LogEvent event, final SubEvent subEvent, final String proctorId, final UUID sessionId) {
        log(event, fields(proctorId, sessionId, subEvent));
    }

    // event error functions
    public static void error(final LogEvent event, final Exception e) {
        error(event, new HashMap<EventData, Object>(), e);
    }

    public static void error(final LogEvent event, final String proctorId, final Exception e) {
        error(event, fields(proctorId), e);
    }

    public static void error(final LogEvent event, final String proctorId, final UUID sessionId, final Exception e) {
        error(event, fields(proctorId, sessionId), e);
    }

    public static void error(final LogEvent event, final SubEvent subEvent, final String proctorId, final UUID sessionId, final Exception e) {
        error(event, fields(proctorId, sessionId, subEvent), e);
    }

    // converts parameters to a map
    private static Map<EventData, Object> fields(final String proctorId) {
        final Map<EventData, Object> map = new HashMap<>();
        map.put(PROCTOR_ID, proctorId);
        return map;
    }

    private static Map<EventData, Object> fields(final String proctorId, final UUID sessionId) {
        final Map<EventData, Object> map = fields(proctorId);
        map.put(SESSION_ID, sessionId.toString());
        return map;
    }

    private static Map<EventData, Object> fields(final String proctorId, final UUID sessionId, final SubEvent subEventData) {
        final Map<EventData, Object> map = fields(proctorId, sessionId);
        map.put(SUB_EVENT, toString(subEventData));
        return map;
    }

    // converts enum to string
    private static String toString(final Enum value) {
        return value.name().toLowerCase();
    }

    // converts map with enum keys to string keys
    private static Map<String, Object> toStringKeys(final Map<EventData, Object> data) {
        final Map<String, Object> fields = new HashMap<>();
        for (Map.Entry<EventData, Object> entry : data.entrySet()) {
            fields.put(toString(entry.getKey()), entry.getValue());
        }
        return fields;
    }

    private static void log(final LogEvent event, final Map<EventData, Object> data) {
        EventLogger.log(APP, toString(event), toStringKeys(data));
    }

    private static void error(final LogEvent event, final Map<EventData, Object> data, Exception e) {
        EventLogger.error(APP, toString(event), toStringKeys(data), e);
    }
}
