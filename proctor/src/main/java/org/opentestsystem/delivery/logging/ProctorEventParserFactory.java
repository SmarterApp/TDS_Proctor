package org.opentestsystem.delivery.logging;

import com.google.common.base.Optional;
import net.logstash.logback.encoder.org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.logging.EventLogger.LogEvent;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.ASSESSMENTS;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.ADD_ASSESSMENTS;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.START_SESSION;

public class ProctorEventParserFactory extends EventParserFactory {

  private static Map<String, Class<? extends EventParser>> classMap = new HashMap<>();

  static {
    classMap.put("/XHR.axd/InsertSessionTests", AssessmentParser.class);
  }

  @Override
  protected Map<String, Class<? extends EventParser>> getEventParserClassMap() {
    return classMap;
  }
}

//class ProctorParser extends EventParser {
//
//  public Optional<EventInfo> parsePreHandle(final Object handler, final HttpServletRequest request, EventLogger logger) {
//    for(Cookie cookie: request.getCookies()) {
//
//    }
//
//    return Optional.of(EventInfo.create(event.name(), fields));
//  }
//}

class AssessmentParser extends EventParser {
  @Override
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, EventLogger logger) {
    LogEvent event = ADD_ASSESSMENTS;
    String sessionKey = request.getParameter("sessionKey");
    if (StringUtils.isBlank(sessionKey)) {
      event = START_SESSION;
    }
    String assessments = request.getParameter("testIDs");
    final Map<EventLogger.EventData, Object> fields = getEventDataFields(request);
    fields.put(ASSESSMENTS, assessments);
    return Optional.of(EventInfo.create(event.name(), fields));
  }

  @Override
  public Optional<EventInfo> parsePostHandle(HttpServletRequest request, HttpServletResponse response,
                                             EventLogger logger) {
    LogEvent event = ADD_ASSESSMENTS;
    String sessionKey = request.getParameter("sessionKey");
    if (StringUtils.isBlank(sessionKey)) {
      event = START_SESSION;
    }
    return Optional.of(EventInfo.create(event.name(), getEventDataFields(request)));
  }
}
