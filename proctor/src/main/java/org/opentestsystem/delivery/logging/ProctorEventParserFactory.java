package org.opentestsystem.delivery.logging;

import TDS.Proctor.Sql.Data.ProctorUser;
import TDS.Proctor.Web.Handlers.ActiveSessionXHR;
import com.google.common.base.Optional;
import net.logstash.logback.encoder.org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.logging.EventLogger.LogEvent;
import org.springframework.web.method.HandlerMethod;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.BROWSER_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.PROCTOR_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.SESSION_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.ADD_ASSESSMENT;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.START_SESSION;

public class ProctorEventParserFactory extends EventParserFactory {

  private static final Map<String, Class<? extends EventParser>> classMap = new HashMap<>();

  static {
    classMap.put("*", ProctorParser.class);
    classMap.put("/XHR.axd/InsertSessionTests", AssessmentParser.class);
  }

  @Override
  protected Map<String, Class<? extends EventParser>> getEventParserClassMap() {
    return classMap;
  }
}

class ProctorParser extends EventParser {
  public Map<EventLogger.EventData, Object> getEventDataFields(final HttpServletRequest request, final Object handler) {
    final Map<EventLogger.EventData, Object> fields = getEventDataFields(request);

    if (handler != null && handler instanceof HandlerMethod) {
      final HandlerMethod handlerMethod = (HandlerMethod) handler;
      if (handlerMethod.getBean() != null && handlerMethod.getBean() instanceof ActiveSessionXHR) {
        final ActiveSessionXHR activeSessionXHR = (ActiveSessionXHR)handlerMethod.getBean();
        final ProctorUser proctorUser = activeSessionXHR.getUser();
        fields.put(PROCTOR_ID, proctorUser.getId());
        fields.put(SESSION_ID, proctorUser.getSessionKey());
        fields.put(BROWSER_ID, proctorUser.getBrowserKey());
      }
    }
    return fields;
  }

  @Override
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, final Object handler, final EventLogger logger) {
    return Optional.of(EventInfo.create(request.getPathInfo(), getEventDataFields(request, handler)));
  }

  @Override
  public Optional<EventInfo> parsePostHandle(final HttpServletRequest request, final HttpServletResponse response, final Object handler,
                                             final EventLogger logger) {
    return parsePreHandle(request, handler, logger);
  }
}

class AssessmentParser extends ProctorParser {
  @Override
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, final Object handler, final EventLogger logger) {
    LogEvent event = ADD_ASSESSMENT;
    final String sessionKey = request.getParameter("sessionKey");
    if (StringUtils.isBlank(sessionKey)) {
      event = START_SESSION;
    }
    return Optional.of(EventInfo.create(event.name(), getEventDataFields(request, handler)));
  }
}
