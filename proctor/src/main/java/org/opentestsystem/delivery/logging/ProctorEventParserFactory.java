package org.opentestsystem.delivery.logging;

import TDS.Proctor.Sql.Data.ProctorUser;
import TDS.Proctor.Web.Handlers.ActiveSessionXHR;
import com.google.common.base.Optional;
import net.logstash.logback.encoder.org.apache.commons.lang.StringUtils;
import org.opentestsystem.delivery.logging.EventLogger.LogEvent;
import org.springframework.web.method.HandlerMethod;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.ASSESSMENTS;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.EXAM;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.PROCTOR_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorEventData.SESSION_ID;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.ADD_ASSESSMENTS;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.PRINT;
import static org.opentestsystem.delivery.logging.ProctorEventLogger.ProctorLogEvent.START_SESSION;
import static org.opentestsystem.delivery.logging.ProctorParser.addProctorUserDataFields;

public class ProctorEventParserFactory extends EventParserFactory {

  private static Map<String, Class<? extends EventParser>> classMap = new HashMap<>();

  static {
    classMap.put("/XHR.axd/InsertSessionTests", AssessmentParser.class);
    classMap.put("/XHR.axd/GetCurrentRequests", PrintRequestParser.class);
  }

  @Override
  protected Map<String, Class<? extends EventParser>> getEventParserClassMap() {
    return classMap;
  }
}

class ProctorParser {
  static public void addProctorUserDataFields(final Map<EventLogger.EventData, Object> fields, final Object handler) {
    if (handler != null && handler instanceof HandlerMethod) {
      final HandlerMethod handlerMethod = (HandlerMethod) handler;
      if (handlerMethod.getBean() != null && handlerMethod.getBean() instanceof ActiveSessionXHR) {
        final ActiveSessionXHR activeSessionXHR = (ActiveSessionXHR)handlerMethod.getBean();
        final ProctorUser proctorUser = activeSessionXHR.getUser();
        fields.put(PROCTOR_ID, proctorUser.getId());
        fields.put(SESSION_ID, proctorUser.getSessionKey());
      }
    }
  }
}


class AssessmentParser extends EventParser {
  @Override
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, Object handler, EventLogger logger) {
    LogEvent event = ADD_ASSESSMENTS;
    final String sessionKey = request.getParameter("sessionKey");
    if (StringUtils.isBlank(sessionKey)) {
      event = START_SESSION;
    }
    final String assessments = request.getParameter("testIDs");
    final Map<EventLogger.EventData, Object> fields = getEventDataFields(request);
    addProctorUserDataFields(fields, handler);
    fields.put(ASSESSMENTS, assessments);
    return Optional.of(EventInfo.create(event.name(), fields));
  }

  @Override
  public Optional<EventInfo> parsePostHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                                             Object handler, EventLogger logger) {
    return parsePreHandle(request, handler, logger);
//    LogEvent event = ADD_ASSESSMENTS;
//    final String sessionKey = request.getParameter("sessionKey");
//    if (StringUtils.isBlank(sessionKey)) {
//      event = START_SESSION;
//    }
//    final Map<EventLogger.EventData, Object> fields = getEventDataFields(request);
//    addProctorUserDataFields(fields, handler);
//    fields.put(ASSESSMENTS, assessments);
//    return Optional.of(EventInfo.create(event.name(), getEventDataFields(request)));
  }
}


class PrintRequestParser extends EventParser {
  @Override
  public Optional<EventInfo> parsePreHandle(final HttpServletRequest request, final Object handler, final EventLogger logger) {
    final LogEvent event = PRINT;
    final String exam = request.getParameter("oppKey");

    final Map<EventLogger.EventData, Object> fields = getEventDataFields(request);
    addProctorUserDataFields(fields, handler);

    fields.put(EXAM, exam);
    return Optional.of(EventInfo.create(event.name(), fields));
  }

  @Override
  public Optional<EventInfo> parsePostHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
                                             EventLogger logger) {
    final LogEvent event = PRINT;

    return Optional.of(EventInfo.create(event.name(), getEventDataFields(request)));
  }
}
