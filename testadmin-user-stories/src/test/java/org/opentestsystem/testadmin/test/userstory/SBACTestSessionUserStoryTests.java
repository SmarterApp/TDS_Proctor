/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.testadmin.test.userstory;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.tds.loadtest.api.Assessment;
import org.opentestsystem.delivery.tds.loadtest.api.Student;
import org.opentestsystem.delivery.tds.loadtest.api.StudentCredentialSet;
import org.opentestsystem.delivery.tds.loadtest.api.TDSUser;
import org.opentestsystem.delivery.tds.loadtest.api.TDSUserCredentialSet;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionResponse;
import org.opentestsystem.testadmin.test.pagedriver.RTSSignonPage;
import org.opentestsystem.testadmin.test.pagedriver.TestAdminMainPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentLoginPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentLoginVerifyPage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration ("student-and-testadmin-login-story-context.xml")
@ActiveProfiles ({ "SBAC" })
public class SBACTestSessionUserStoryTests
{
  private static final Logger                    _logger = LoggerFactory.getLogger (SBACTestSessionUserStoryTests.class);

  // This is a test administrator
  @Resource (name = "alice")
  protected TDSUser<HtmlUnitInteractionResponse> alice;

  // This is a student
  @Resource (name = "bob")
  protected Student<HtmlUnitInteractionResponse> bob;

  // This is a test
  @Resource (name = "theTests")
  protected Assessment[]                         theTests;

  // This is the test admin application
  @Autowired
  @Qualifier ("testAdminApplication")
  WebApplication                                 testAdminApp;

  // This is the student application
  @Autowired
  @Qualifier ("studentApplication")
  WebApplication                                 studentApp;

  /**
   * Alice successfully logs in to the test administrator application using her
   * RTS package login. Then student logs in to session
   */
  @Test
  public void testSessionTest () throws Throwable {
    TDSUserCredentialSet testadminCredentials = (TDSUserCredentialSet) alice.getCredentialSet (TDSUserCredentialSet.KEY);
    _logger.info ("Testadmin \"alice\" using credentials {}:{}", testadminCredentials.getUserId (), testadminCredentials.getPassword ());

    StudentCredentialSet studentCredentials = (StudentCredentialSet) bob.getCredentialSet (StudentCredentialSet.KEY);
    _logger.info ("Student \"bob\" using\r\n   Grade {}\r\n   Date of Birth {}\r\n   SSID {}\r\n   First Name {}\r\n   Last Name {}\r\n   School {}",
        studentCredentials.getGrade (), studentCredentials.getDateOfBirth (), studentCredentials.getExternalSsid (),
        studentCredentials.getFirstName (), studentCredentials.getLastName (), studentCredentials.getSchoolId ());

    // BEGIN: Test administrator logs in
    alice.browse (testAdminApp).expecting (RTSSignonPage.class);
    ((RTSSignonPage) alice._ ()).doLogin (30000).expecting (TestAdminMainPage.class);
    _logger.debug (((TestAdminMainPage) alice._ ()).getPage ().getWebResponse ().getContentAsString ());
    ((TestAdminMainPage) alice._ ()).assertStatusOk ();
    // END: Test administrator logs in.

    // BEGIN: Test administrator selects the test
    List<Assessment> availableAssessments = ((TestAdminMainPage) alice._ ()).getAvailableAssessments ();
    assertTrue ("No available assessments found on testadmin login page.", availableAssessments.size () >= 1);
    assertTrue ("Expected test not found on testadmin login page.", availableAssessments.contains (theTests));

    ((TestAdminMainPage) alice._ ()).selectAssessment (theTests[0]);
    List<Assessment> selectedAssessments = ((TestAdminMainPage) alice._ ()).getSelectedAssessments ();
    assertEquals ("Wrong number of selected tests.", 1, selectedAssessments.size ());
    assertEquals ("Wrong assessment selected.", theTests, selectedAssessments.get (0));
    // END: Test administrator selects the test

    // BEGIN: Test administrator opens the test session
    ((TestAdminMainPage) alice._ ()).startSession (30000).expecting (TestAdminMainPage.class);
    String sessionId = ((TestAdminMainPage) alice._ ()).getActiveSessionId ();
    // END: Test administrator opens the session

    // BEGIN: Student logs in
    _logger.info ("SessionID: {}", sessionId);
    _logger.info ("Stuent signon page at: {}", studentApp.getIndexUrl ());
    bob.browse (studentApp).expecting (JSStudentLoginPage.class);
    ((JSStudentLoginPage) bob._ ()).doLogin (sessionId,30000).expecting (JSStudentLoginVerifyPage.class);
    // END: Student logs in
  }
}
