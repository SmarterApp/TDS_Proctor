/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.testadmin.test.userstory;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.delivery.tds.loadtest.api.Assessment;
import org.opentestsystem.delivery.tds.loadtest.api.ItemDriver;
import org.opentestsystem.delivery.tds.loadtest.api.Student;
import org.opentestsystem.delivery.tds.loadtest.api.StudentCredentialSet;
import org.opentestsystem.delivery.tds.loadtest.api.TDSUser;
import org.opentestsystem.delivery.tds.loadtest.api.TDSUserCredentialSet;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.opentestsystem.shared.test.api.WebApplication;
import org.opentestsystem.shared.test.interactioncontext.HtmlUnitInteractionResponse;
import org.opentestsystem.testadmin.test.pagedriver.ApprovalsDialog;
import org.opentestsystem.testadmin.test.pagedriver.RTSSignonPage;
import org.opentestsystem.testadmin.test.pagedriver.TestAdminMainPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentInstructionsPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentLoginPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentLoginVerifyPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentTTSCheckPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentTestSelectionPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentTestVerifyPage;
import org.opentestsystem.testadmin.test.pagedriver.loginshell.js.JSStudentWaitForApprovalPage;
import org.opentestsystem.testadmin.test.pagedriver.testshell.StudentEndTestConfirmPage;
import org.opentestsystem.testadmin.test.pagedriver.testshell.JSStudentTestShellDriver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration ("student-and-testadmin-login-story-context.xml")
@ActiveProfiles ({ "MINNESOTA_PT" })
public class TestSessionUserStoryTests
{
  private static final Logger                    _logger = LoggerFactory.getLogger (TestSessionUserStoryTests.class);

  // This is a test administrator
  @Resource (name = "alice")
  protected TDSUser<HtmlUnitInteractionResponse> alice;

  // This is a student
  @Resource (name = "bob")
  protected Student<HtmlUnitInteractionResponse> bob;

  // This is a test
  @Resource (name = "theTests")
  protected Assessment[]                         theTests;

  // This is the test admin application
  @Autowired
  @Qualifier ("testAdminApplication")
  WebApplication                                 testAdminApp;

  // This is the student application
  @Autowired
  @Qualifier ("studentApplication")
  WebApplication                                 studentApp;

  /**
   * Alice successfully logs in to the test administrator application using her
   * RTS package login. Then student logs in to session
   */
  @Test
  public void testSessionTest () throws Throwable {

    TDSUserCredentialSet testadminCredentials = (TDSUserCredentialSet) alice.getCredentialSet (TDSUserCredentialSet.KEY);
    _logger.info ("Testadmin \"alice\" using credentials {}:{}", testadminCredentials.getUserId (), testadminCredentials.getPassword ());

    StudentCredentialSet studentCredentials = (StudentCredentialSet) bob.getCredentialSet (StudentCredentialSet.KEY);
    _logger.info ("Student \"bob\" using\r\n   Grade {}\r\n   Date of Birth {}\r\n   SSID {}\r\n   First Name {}\r\n   Last Name {}\r\n   School {}",
        studentCredentials.getGrade (), studentCredentials.getDateOfBirth (), studentCredentials.getExternalSsid (),
        studentCredentials.getFirstName (), studentCredentials.getLastName (), studentCredentials.getSchoolId ());

    // BEGIN: Test administrator logs in
    alice.browse (testAdminApp).expecting (RTSSignonPage.class);
    ((RTSSignonPage)alice._ ()).doLogin (30000).expecting (TestAdminMainPage.class);
    ((TestAdminMainPage)alice._ ()).assertStatusOk ();
    // END: Test administrator logs in.

    // BEGIN: Test administrator selects the test
    ((TestAdminMainPage)alice._ ()).waitForAvailableAssessments (10000);
    ((TestAdminMainPage)alice._ ()).selectAssessment (theTests[0]);
    List<Assessment> selectedAssessments = ((TestAdminMainPage)alice._ ()).getSelectedAssessments ();
    assertEquals ("Wrong number of selected tests.", 1, selectedAssessments.size ());
    assertEquals ("Wrong assessment selected.", theTests, selectedAssessments.get (0));
    // END: Test administrator selects the test

    // BEGIN: Test administrator opens the test session
    ((TestAdminMainPage)alice._ ()).startSession (30000).expecting (TestAdminMainPage.class);
    ((TestAdminMainPage)alice._ ()).waitForSessionStarted (10000);
    String sessionId = ((TestAdminMainPage)alice._ ()).getActiveSessionId ();
    // END: Test administrator opens the session

    // BEGIN: Student logs in and requests to begin test
    _logger.info ("SessionID: {}", sessionId);
    _logger.info ("Student signon page at: {}", studentApp.getIndexUrl ());
    bob.browse (studentApp).expecting (JSStudentLoginPage.class);
    ((JSStudentLoginPage)bob._ ()).doLogin (sessionId,30000).expecting (JSStudentLoginVerifyPage.class);
    ((JSStudentLoginVerifyPage)bob._ ()).verifyIdentity ();
    ((JSStudentLoginVerifyPage)bob._ ()).getGradeSelector ().setSelectedAttribute ("11", true);
    ((JSStudentLoginVerifyPage)bob._ ()).submitForm (30000).expecting (JSStudentTestSelectionPage.class);
    ((JSStudentTestSelectionPage)bob._ ()).startTest (0,30000).expecting (JSStudentWaitForApprovalPage.class);

    // END: Student logs in and requests to begin test

    // BEGIN: Test admin approves test start request
    TestAdminMainPage testAdminMainPage = (TestAdminMainPage) alice._ ();
    boolean success = testAdminMainPage.getTestApprovalRequests ().size () > 0;
    for (int i = 0; i < 10 && !success; i++) {
      testAdminMainPage.refresh (1000);
      success = testAdminMainPage.getTestApprovalRequests ().size () > 0;
    }
    assertTrue ("No test approval requests found in 10 tries.", success);
    testAdminMainPage.requestApprovals (30000).expecting (ApprovalsDialog.class);
    ((ApprovalsDialog)alice._ ()).approve (bob,30000).expecting (TestAdminMainPage.class);
    // END: Test admin approves test start request

    // BEGIN: Student begins test
    ((JSStudentWaitForApprovalPage)bob._ ()).checkForApproval (30000).expecting (JSStudentTestVerifyPage.class);
    ((JSStudentTestVerifyPage)bob._ ()).approve (30000).expecting (JSStudentTTSCheckPage.class);
    ((JSStudentTTSCheckPage)bob._ ()).continue_ (30000).expecting (JSStudentInstructionsPage.class);
    ((JSStudentInstructionsPage)bob._ ()).startTest (30000).expecting (JSStudentTestShellDriver.class);
    // END: Student begins test

    // BEGIN: Student answers the test questions
    while (true) {
      for (ItemDriver item_i : ((JSStudentTestShellDriver)bob._ ()).getItems ()) {
        bob.answer (item_i);
      }
      if (((JSStudentTestShellDriver)bob. _ ()).getEndButton ().isDisplayed ()) {
        break;
      }
      ((JSStudentTestShellDriver)bob._ ()).moveNext (30000).expecting (JSStudentTestShellDriver.class);
    }
    // END: Student answers the test questions

    // BEGIN: Student submits test and logs out
    _logger.debug ("Clicking END in TestShell (expecting confirmation dialog)");
    ((JSStudentTestShellDriver)bob._ ()).moveEnd (30000).expecting (StudentEndTestConfirmPage.class);

    // // Initial load of review shell is leading to stack overflow error in JS
    // engine
    // org.apache.log4j.Logger.getLogger (ElementAddListener.class).setLevel
    // (Level.TRACE);
    // org.apache.log4j.Logger.getLogger (DebugFrameImpl.class).setLevel
    // (Level.TRACE);

    // _logger.debug("Confirming test end (expecting review shell)");
    // bob.<StudentEndTestConfirmPage> _ ().OK ().expecting (ReviewShell.class);
    // _logger.debug("Current size of XML: {}",
    // bob.<ReviewShell>_().getPage().asXml ().length ());
    // _logger.debug ("Sleeping for 60 seconds");
    // Thread.sleep (60000);
    // _logger.debug("Size of XML after sleep: {}",
    // bob.<ReviewShell>_().getPage().asXml ().length ());
    // _logger.debug("Submitting test from review shell (expecting review shell with confirmation dialog)");
    // bob.<ReviewShell> _ ().submit ().expecting (ReviewShell.class);
    //
    // // This line is failing with NPE (no showing dialog)
    // _logger.debug("Accepting review shell confirmation dialog (expecting logout dialog)");
    // bob.<ReviewShell> _ ().confirmSubmit ().expecting (ReviewShell.class);
    // _logger.debug("Clicking logout button (expecting login page)");
    // bob.<ReviewShell> _ ().logout ().expecting (RTSSignonPage.class);
    // // END: Student submits test and logs out

    // BEGIN: Testadmin closes session and logs out

    // END: Testadmin closes session and logs out
  }
}
