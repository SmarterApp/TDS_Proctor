/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package opentestsystem.testadmin.utilities;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.lang.StringUtils;
import org.dbunit.DatabaseUnitException;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatDtdDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSet;

public class DbUnitDump {
	
	public static final String OPTION_NAME_DRIVER = "driver";
	public static final String OPTION_NAME_JDBC_URL = "jdbcurl";
	public static final String OPTION_NAME_JDBC_USER = "user";
	public static final String OPTION_NAME_JDBC_PASSWORD = "password";
	public static final String OPTION_NAME_SCHEMA_FILENAME = "schema";
	public static final String OPTION_DEFAULT_SCHEMA_FILENAME = "scehma.dtd";
	public static final String OPTION_NAME_DATA_FILENAME = "datafile";
	public static final String OPTION_DEFAULT_DATA_FILENAME = "data.xml";

	public static void main( String[] args ) throws SQLException, DatabaseUnitException, FileNotFoundException, IOException {
		
	    // Parse arguments
	    Options options = new Options ();
	    Option opt = new Option( "d", OPTION_NAME_DRIVER, true, "Name of jdbc driver class (required)" );
	    opt.setRequired( true );
	    options.addOption ( opt );
	    
	    opt = new Option( "j", OPTION_NAME_JDBC_URL, true, "JDBC Url of database to dump (required)" );
	    opt.setRequired( true );
	    options.addOption ( opt );
	    
	    options.addOption ("u", OPTION_NAME_JDBC_USER, true, "Database username (optional)" );

	    options.addOption ("p", OPTION_NAME_JDBC_PASSWORD, true, "Database password (optional)" );

	    options.addOption ("s", OPTION_NAME_SCHEMA_FILENAME, true,
	    		String.format( "Name of file to contain generated schema document (defaults to %s)", OPTION_DEFAULT_SCHEMA_FILENAME ) );
	    
	    options.addOption ("o", OPTION_NAME_DATA_FILENAME, true,
	    		String.format( "Name of file to contain data (defaults to %s)", OPTION_DEFAULT_DATA_FILENAME ) );
	    
	    CommandLineParser cliParser = new GnuParser ();
	    CommandLine cli=null;
		try {
			cli = cliParser.parse (options, args);
		} catch (ParseException e) {
    		System.out.println( "Unable to parse command line" );
			e.printStackTrace();
			System.exit(1);
		}

	    String driverClassName = cli.getOptionValue (OPTION_NAME_DRIVER);
	    
	    try {
	    	Class.forName( driverClassName );
	    }
	    catch ( Exception e ) {
	    	if ( StringUtils.isBlank( driverClassName ) ) {
	    		System.out.println( "Driver class must be specified (option -d)" );
	    		System.exit(1);
	    	}
    		System.out.println( String.format( "Unable to load driver class %s", driverClassName ) );
    		e.printStackTrace();
    		System.exit(1);
	    }
	    
	    String jdbcUrl = cli.getOptionValue( OPTION_NAME_JDBC_URL );
	    String jdbcUser = cli.getOptionValue( OPTION_NAME_JDBC_USER );
	    String jdbcPassword = cli.getOptionValue( OPTION_NAME_JDBC_PASSWORD );
	    String schemaFilename = cli.getOptionValue( OPTION_NAME_SCHEMA_FILENAME, OPTION_DEFAULT_SCHEMA_FILENAME );
	    String dataFilename = cli.getOptionValue( OPTION_NAME_DATA_FILENAME, OPTION_DEFAULT_DATA_FILENAME );

	    Connection jdbcConnection = null;
        if ( StringUtils.isBlank( jdbcUser ) ) {
        	jdbcConnection = DriverManager.getConnection( jdbcUrl );
        }
        else {
        	jdbcConnection = DriverManager.getConnection( jdbcUrl, jdbcUser, jdbcPassword );
        }
        IDatabaseConnection connection = new DatabaseConnection(jdbcConnection);
        connection.getConfig().setProperty( DatabaseConfig.PROPERTY_ESCAPE_PATTERN, "[?]" );
        
        System.out.println( String.format( "Writing schema to %s", schemaFilename ) );
        FlatDtdDataSet.write(connection.createDataSet(), new FileOutputStream( schemaFilename ));
        
        System.out.println( String.format( "Writing data file to %s", dataFilename ) );
        
        IDataSet fullDataSet = connection.createDataSet();
        FlatXmlDataSet.write(fullDataSet, new FileOutputStream( dataFilename ) );
        
        System.out.println( "Done." );
	}
}
